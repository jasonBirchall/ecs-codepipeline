AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  AppName:
    Type: String
    Default: SampleApp
  Creator:
    Type: String
    Default: andrewlarssen
  EcsCluster:
    Type: String
    Default: CCR
Resources:

################################################################################
#
# App container setup and ALB
#
################################################################################

  Service:
    Type: AWS::ECS::Service
    DependsOn: AlbHTTPListener
    Properties:
      Cluster: !Ref 'EcsCluster'
      DesiredCount: '2'
      LoadBalancers:
        - ContainerName: ccr
          ContainerPort: '80'
          TargetGroupArn: !Ref 'TargetGroup'
      Role: !Ref 'EcsServiceRole'
      TaskDefinition: !Ref 'TaskDefinition'
  EcsServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - 'ecs.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: ccr-ecs-service
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'elasticloadbalancing:DeregisterInstancesFromLoadBalancer'
                  - 'elasticloadbalancing:DeregisterTargets'
                  - 'elasticloadbalancing:Describe*'
                  - 'elasticloadbalancing:RegisterInstancesWithLoadBalancer'
                  - 'elasticloadbalancing:RegisterTargets'
                  - 'ec2:Describe*'
                  - 'ec2:AuthorizeSecurityGroupIngress'
                Resource: '*'
  ServiceScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    DependsOn: Service
    Properties:
      MaxCapacity: 4
      MinCapacity: 2
      ResourceId: !Join ['', [service/, !Ref 'EcsCluster', /, !GetAtt Service.Name]]
      RoleARN: !GetAtt AutoscalingRole.Arn
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
  ServiceScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: AStepPolicy
      PolicyType: StepScaling
      ScalingTargetId: !Ref 'ServiceScalingTarget'
      StepScalingPolicyConfiguration:
        AdjustmentType: PercentChangeInCapacity
        Cooldown: 60
        MetricAggregationType: Average
        StepAdjustments:
          - MetricIntervalLowerBound: 0
            ScalingAdjustment: 200
  ALB500sAlarmScaleUp:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: '1'
      Statistic: Average
      Threshold: '10'
      AlarmDescription: Alarm if our ALB generates too many HTTP 500s.
      Period: '60'
      AlarmActions: [!Ref 'ServiceScalingPolicy']
      Namespace: AWS/ApplicationELB
      Dimensions:
        - Name: EcsService
          Value: !Ref 'Service'
      ComparisonOperator: GreaterThanThreshold
      MetricName: HTTPCode_ELB_5XX_Count
  AlbHTTPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn: EcsServiceRole
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref 'TargetGroup'
      LoadBalancerArn: !Ref 'LoadBalancer'
      Port: '80'
      Protocol: HTTP
  EcsAlbHTTPListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    DependsOn: AlbHTTPListener
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref 'TargetGroup'
      Conditions:
        - Field: path-pattern
          Values: [/]
      ListenerArn: !Ref 'AlbHTTPListener'
      Priority: 1
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: LoadBalancer
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Name: !Join ['', [!Ref 'AWS::StackName', TargetGroup]]
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !ImportValue 'CCR-VPCID'
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Join ['', [!Ref 'AWS::StackName', LoadBalancer]]
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '30'
      Subnets: !Split [ ',', !ImportValue CCR-PUBLIC-SUBNETS ]
      SecurityGroups:
        - !ImportValue 'CCR-LBSECGRP'
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Join ['', [!Ref 'AWS::StackName', -app]]
      ContainerDefinitions:
        - Name: ccr
          Cpu: '10'
          Essential: 'true'
          Image: httpd:2.4
          Memory: '300'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref 'CloudwatchLogsGroup'
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: ecs-demo-app
          MountPoints:
            - ContainerPath: /usr/local/apache2/htdocs
              SourceVolume: my-vol
          PortMappings:
            - ContainerPort: 80
        - Name: busybox
          Cpu: 10
          Command: ['/bin/sh -c "while true; do echo ''<html> <head> <title>Amazon ECS
              Sample App</title> <style>body {margin-top: 40px; background-color: #333;}
              </style> </head><body> <div style=color:white;text-align:center> <h1>Amazon
              ECS Sample App</h1> <h2>Congratulations!</h2> <p>Your application is now
              running on a container in Amazon ECS.</p>'' > top; /bin/date > date ;
              echo ''</div></body></html>'' > bottom; cat top date bottom > /usr/local/apache2/htdocs/index.html
              ; sleep 1; done"']
          EntryPoint: [sh, -c]
          Essential: false
          Image: busybox
          Memory: 200
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref 'CloudwatchLogsGroup'
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: ecs-demo-app
          VolumesFrom:
            - SourceContainer: ccr
      Volumes:
        - Name: my-vol
  CloudwatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['-', [ECSLogGroup, !Ref 'AWS::StackName']]
      RetentionInDays: 14
  AutoscalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - 'application-autoscaling.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: service-autoscaling
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'application-autoscaling:*'
                  - 'cloudwatch:DescribeAlarms'
                  - 'cloudwatch:PutMetricAlarm'
                  - 'ecs:DescribeServices'
                  - 'ecs:UpdateService'
                Resource: '*'

Outputs:
  ecsservice:
    Value: !Ref 'Service'
  url:
    Description: Your ALB DNS URL
    Value: !GetAtt LoadBalancer.DNSName
  taskdef:
    Value: !Ref 'TaskDefinition'
